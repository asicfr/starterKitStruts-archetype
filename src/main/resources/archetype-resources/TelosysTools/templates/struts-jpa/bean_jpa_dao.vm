/*
 * D.A.O. for JPA  
 * Created on $today.date ( Time $today.time )
 */

package ${target.javaPackageFromFolder(${SRC})};

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.telosys.starterkits.strutsjpa.CoreUtils;
import org.telosys.starterkits.strutsjpa.GenericJpaDao;

import org.demo.${beanClass.name.toLowerCase()}.bean.${beanClass.name};
#if ( $beanClass.hasCompositePrimaryKey() )
import org.demo.${beanClass.name.toLowerCase()}.bean.${beanClass.name}Key;
#set( $keyType = "${beanClass.name}Key" )
#else 
#set( $keyType = ${beanClass.keyAttributes.get(0).wrapperType} )
#end

public class Jpa${beanClass.name}DAO extends GenericJpaDao<${beanClass.name}, ${keyType}> {

	private static final Predicate[] ap = {};
	
	/**
	 * Constructs a DAO for ${beanClass.name}
	 */
	public Jpa${beanClass.name}DAO() {
		super(${beanClass.name}.class);
	}
	
	/**
	 * Search by ${beanClass.name} example
	 */
	public List<${beanClass.name}> search(final ${beanClass.name} element) {
		final EntityManager em = getEntityManager();
		if ( element != null  ) {
			CriteriaBuilder criteriaBuilder = em.getCriteriaBuilder();
			CriteriaQuery<${beanClass.name}> criteriaQuery = criteriaBuilder.createQuery(${beanClass.name}.class);
			Root<${beanClass.name}> from = criteriaQuery.from(${beanClass.name}.class);

			List<Predicate> listP = new ArrayList<Predicate>();

#if ( $beanClass.hasCompositePrimaryKey() )
			if ( element.getKey() != null  ) {
#foreach( $field in $beanClass.KeyAttributes )
				if (CoreUtils.isNotBlank(element.getKey().${field.getter}())) {
					Predicate predicate = criteriaBuilder.equal(from.get("${field.name}"), element.getKey().${field.getter}());
					listP.add(predicate);
				}
#end
			}
#set( $attributes = $beanClass.nonKeyAttributes )
#else 
#set( $attributes = $beanClass.attributes )
#end

#foreach( $field in $attributes )
			if (CoreUtils.isNotBlank(element.${field.getter}())) {
				Predicate predicate = criteriaBuilder.equal(from.get("${field.name}"), element.${field.getter}());
				listP.add(predicate);
			}
#end
			
			criteriaQuery.where(listP.toArray(ap));
			TypedQuery<${beanClass.name}> tq = em.createQuery(criteriaQuery);
			return tq.getResultList();
		}
		else
		{
    		return this.loadAll();
		}
	}

}